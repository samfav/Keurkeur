\documentclass[a4paper, 10pt]{article}
\usepackage[utf8x]{inputenc}
\usepackage{graphicx}
\usepackage{geometry}
\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{mathrsfs}
\usepackage{color}
\usepackage{version}
\usepackage{listings}

\geometry{hmargin = 1.5cm, vmargin = 1cm}

% OPENING
\title{SY09 - TP03\\Discrimination, théorie bayésienne de la décision}
\author{Nicolas Szewe - Marie Chatelin}

\begin{document}

\maketitle

\section{Classifieur euclidien, K plus proches voisins}

\subsection{Programmation}

Vous trouverez en annexe de ce rapport, les fonctions ceuc.app,ceuc.val, kppv.app et kppv.val.
Ces fonctions pourraient être amélioré en ...
Cependant nous sommes satisfait de leurs comportements car ...

Veuillez trouver ci-dessous, les graphiques correspondant aux résultats de ceuc.val et kppv.val 
(pour K=3 et K=15).
 
\begin{center}
\includegraphics[height = 7cm, width = 7cm]{classificateur_euclidien.png}
\end{center}


\begin{center}
\textit{Table 1 : Repartition de la population selon le classificateur Euclidien}
\end{center}

\begin{center}
\includegraphics[height = 7cm, width = 7cm]{k3.png}
\includegraphics[height = 7cm, width = 7cm]{k15.png}
\end{center}

\begin{center}
\textit{Table 2 : Repartition de la population en fonction des 3 et 15 plus proches voisins}
\end{center}

\subsection{Evaluation des performances}

\section{Règle de Bayes}

\section{Annexe}

\begin{center}
\begin{lstlisting}[language=R]
ceuc.app <- function(Xapp,zapp){
napp <- dim(Xapp)[1]
nbDimension <- dim(Xapp)[2]
x<- NULL
n <- NULL
x <- rbind(rep(0, nbFamille),rep(0,nbDimension))
for(z in 1:nbFamille){
	for(i in 1:napp){
		if(zapp[i]==z){
			n[z] <- length(zapp[zapp==z])
			for(j in 1:nbDimension){
				x[z,j] <- x[z,j] + Xapp[i,j]
			}
		}
		}
		for(j in 1:nbDimension){
				x[z,j] <- x[z,j] * (1/n[z])
		}
	}
	return(x)
}
}

ceuc.val <- function(mu,Xtst){
napp <- dim(Xtst)[1]
min <- rbind(rep(99999, napp))
nbDimension <- dim(Xtst)[2]
etiquette <- rbind(rep(0,napp))
distance <- rbind(rep(0, nbFamille),rep(0,napp))
for(i in 1:napp){
	for(z in 1:nbFamille){
		distance[z,i] <- distanceEuclidienne(Xtst[i,1],mu[z,1],Xtst[i,2],mu[z,2])
		if(distance[z,i]< min[i]){
			min[i] <- distance[z,i]
			etiquette[i]<-z
		}
	}
}
	return(etiquette)
}
}


distanceEuclidienne <- function(x1,xt,y1,yt){
	return(sqrt((x1-xt)^2 + (y1-yt)^2))
}

getVoisins <- function(Xapp,zapp,K,Xtst){
	napp <- dim(Xapp)[1]
	ntst <- dim(Xtst)[1]
	distance <- matrix(0, ntst, napp)
	voisins <- matrix(0,ntst,K)
	for(i in 1:ntst){
		min <- matrix(99999,K,2)
		for(j in 1:napp){
		distance[i,j] <- distanceEuclidienne(Xtst[i,1],Xapp[j,1],Xtst[i,2],Xapp[j,2])
		if(j <= K ){
			min[j,1] <- distance[i,j]
			min[j,2] <- j
			if(K!=1){
				min <- min[order(min[,1]),]
			}
		}
		else if(distance[i,j]< min[K,1]){
			min[K,1] <- distance[i,j]
			min[K,2] <- j
			if(K!=1){
				min <- min[order(min[,1]),]
			}
		}
		}
		voisins[i,] <- min[,2]
	}
	return(voisins)
}
}

kppv.app <- function(Xapp,zapp,Xval,zval,nppv){
erreur <- 1
for(i in nppv){
    famille_K <- kppv.val(Xapp, zapp, i, Xval)
    erreur_K <- sum((famille_K == zval)==TRUE)/length(zval)
    if(erreur > erreur_K){
      erreur <- erreur_K
      K <- i
    }
  }
  return(K)
}
}

kppv.val <- function(Xapp,zapp,K,Xtst){
	ntst <- dim(Xtst)[1]
	etiquette <- rbind(rep(0,ntst))
	voisins <- getVoisins(Xapp,zapp,K,Xtst)
	for(i in 1:ntst){
		count1 <- 0
		count2 <- 0
		for(k in 1:K){
			if(zapp[voisins[i,k]]==1){
				count1 <- count1 + 1
			}
			else{
				count2 <- count2 + 1
			}
		}
		if(count1 > count2){
			etiquette[i]<-1
		}
		else{
			etiquette[i]<-2
		}
	}
	return(etiquette)
}
}

\end{lstlisting}
\end{center}
\end{document}
