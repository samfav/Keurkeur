getwd
getwd()
donn <- read.table("Synth1-40.txt",header=F)#
X <- donn[,1:2]#
z<- donn[,3]#
#
Xapp <- X[c(1:15,21:35),]#
zapp <- z[c(1:15,21:35)]#
Xtst <- X[c(16:20,36:40),]#
ztst <- z[c(16:20,36:40)]
Xapp
distanceEuclidienne <- function(x1,x2,y1,y2){#
	return sqrt((x1-x2)^2 + (y1-y2)^2)#
}
nbFamille <- length(unique(zapp))
nbFamille
napp <- dim(Xapp)[1]
napp
nbDimension <- dim(Xapp)[2]
zapp[5]
zapp[9]
zapp[20]
n[1] <- length(zapp[zapp==1])
n <- NULL
n[1] <- length(zapp[zapp==1])
n[1]
n[2] <- length(zapp[zapp==2])
n[2]
ceuc.app <- function(Xapp,zapp){#
x<- NULL#
n <- NULL#
x <- rbind(rep(0, nbFamille),rep(0,nbDimension))#
for(z in 1:nbFamille){#
	for(i in 1:napp){#
		if(zapp[i]==z){#
			n[z] <- length(zapp[zapp==z])#
			for(j in 1:nbDimension){#
				x[z,j] <- x[z,j] + Xapp[i,j]#
			}#
		}#
		}#
		for(j in 1:nbDimension){#
				x[z,j] <- x[z,j] * (1/n[z])#
		}	#
	}#
	return(x)#
}
ceuc.app(x)
ceuc.app()
%coucou
#couc
circle <- function(c, radius, nv = 100, border = NULL, col = NA, #
                    lty = 1, lwd = 1) #
{#
    xylim <- par("usr")#
    plotdim <- par("pin")#
    ymult <- (xylim[4] - xylim[3]) / (xylim[2] - xylim[1]) * #
            plotdim[1] / plotdim[2]#
    angle.inc <- 2 * pi / nv#
    angles <- seq(0, 2 * pi - angle.inc, by = angle.inc)#
    xv <- cos(angles) * radius + c[1]#
    yv <- sin(angles) * radius * ymult + c[2]#
    polygon(xv, yv, border = border, col = col, lty = lty, lwd = lwd)#
    invisible(list(x = xv, y = yv))#
}
circle(x,30)
#Functions usefull#
library(MASS)#
#
simul <- function(n, pi, mu1, mu2, sigma1, sigma2) {#
    n1 <- rbinom(1, n, pi)#
    n2 <- n - n1#
    d1 <- mvrnorm(n1, mu1, sigma1)#
    d1 <- cbind(d1, matrix(1, nrow = n1))#
    d2 <- mvrnorm(n2, mu2, sigma2)#
    d2 <- cbind(d2, matrix(2, nrow = n2))#
    d <- rbind(d1, d2)#
    return(d)#
}#
#
moyenneEmpirique <- function(ech) {#
    xMean <- round(mean(ech[, 1]), digits = 6)#
    yMean <- round(mean(ech[, 2]), digits = 6)#
    return(c(xMean, yMean))#
}
R
Xapp
distanceEuclidienne <- function(x1,xt,y1,yt){#
	return(sqrt((x1-xt)^2 + (y1-yt)^2))#
}#
ceuc.app <- function(Xapp,zapp){#
napp <- dim(Xapp)[1]#
nbDimension <- dim(Xapp)[2]#
x<- NULL#
n <- NULL#
x <- rbind(rep(0, nbFamille),rep(0,nbDimension))#
for(z in 1:nbFamille){#
	for(i in 1:napp){#
		if(zapp[i]==z){#
			n[z] <- length(zapp[zapp==z])#
			for(j in 1:nbDimension){#
				x[z,j] <- x[z,j] + Xapp[i,j]#
			}#
		}#
		}#
		for(j in 1:nbDimension){#
				x[z,j] <- x[z,j] * (1/n[z])#
		}	#
	}#
	return(x)#
}#
mu<-rbind(ceuc.app(Xapp,zapp))#
#
ceuc.val <- function(mu,Xtst){#
napp <- dim(Xtst)[1]#
min <- rbind(rep(99999, napp))#
nbDimension <- dim(Xtst)[2]#
etiquette <- rbind(rep(0,napp))#
distance <- rbind(rep(0, nbFamille),rep(0,napp))#
for(i in 1:napp){#
	for(z in 1:nbFamille){#
		distance[z,i] <- distanceEuclidienne(Xtst[i,1],mu[z,1],Xtst[i,2],mu[z,2])#
		if(distance[z,i]< min[i]){#
			min[i] <- distance[z,i]#
			etiquette[i]<-z#
		}#
	}#
}#
	return(etiquette)#
}#
getVoisins <- function(Xapp,zapp,K,Xtst){#
	napp <- dim(Xapp)[1]#
	ntst <- dim(Xtst)[1]#
	distance <- matrix(0, ntst, napp)#
	voisins <- matrix(0,ntst,K)#
	for(i in 1:ntst){#
		min <- matrix(99999,K,2)#
		for(j in 1:napp){#
		distance[i,j] <- distanceEuclidienne(Xtst[i,1],Xapp[j,1],Xtst[i,2],Xapp[j,2])#
		if(j <= K ){#
			min[j,1] <- distance[i,j]#
			min[j,2] <- j#
			if(K!=1){#
				min <- min[order(min[,1]),]#
			}#
		}#
		else if(distance[i,j]< min[K,1]){#
			min[K,1] <- distance[i,j]#
			min[K,2] <- j#
			if(K!=1){#
				min <- min[order(min[,1]),]#
			}#
		}#
		}#
		voisins[i,] <- min[,2]#
	}#
	return(voisins)#
}#
#
kppv.app <- function(Xapp,zapp,Xval,zval,nppv){#
erreur <- 1#
for(i in nppv){#
    famille_K <- kppv.val(Xapp, zapp, i, Xval)#
    erreur_K <- sum((famille_K == zval)==TRUE)/length(zval)#
    print(erreur_K)#
    if(erreur > erreur_K){#
      erreur <- erreur_K#
      K <- i#
    }#
  }#
  return(K)#
}#
#
kppv.val <- function(Xapp,zapp,K,Xtst){#
	ntst <- dim(Xtst)[1]#
	etiquette <- rbind(rep(0,ntst))#
	voisins <- getVoisins(Xapp,zapp,K,Xtst)#
	for(i in 1:ntst){#
		count1 <- 0#
		count2 <- 0#
		for(k in 1:K){#
			if(zapp[voisins[i,k]]==1){#
				count1 <- count1 + 1#
#
			}#
			else{#
				count2 <- count2 + 1#
			}#
		}#
		if(count1 > count2){#
			etiquette[i]<-1#
		}#
		else{#
			etiquette[i]<-2#
		}#
	}#
	return(etiquette)#
}#
#
#Test de nos fonctions#
#
donn <- read.table("data/Synth1-40.txt",header=F)#
X <- donn[,1:2]#
z<- donn[,3]#
#
Xapp <- X[c(1:15,21:35),]#
zapp <- z[c(1:15,21:35)]#
Xtst <- X[c(16:20,36:40),]#
ztst <- z[c(16:20,36:40)]#
#
front.ceuc <- function(ceuc.val, mu, Xapp, zapp)#
{#
	minX <- min(Xapp[,1])-1#
	maxX <- max(Xapp[,1])+1#
	minY <- min(Xapp[,2])-1#
	maxY <- max(Xapp[,2])+1#
	# grille d'affichage #
	grilleX <- seq(from=minX,to=maxX,by=0.01)#
	naffX <- length(grilleX)#
	grilleY <- seq(from=minY,to=maxY,by=0.01)#
	naffY <- length(grilleY)#
#
	grille <- cbind(rep.int(grilleX,times=rep(naffY,naffX)),rep(grilleY,naffX))#
#
	# calcul des valeurs de la fonction #
	valf <- ceuc.val(mu, grille)#
	plot(Xapp, col=c("red","green","blue","magenta","orange")[zapp])#
	contour(grilleX, grilleY, matrix(valf,nrow=naffX,byrow=T), add=T, drawlabels=FALSE, levels=1.5)#
}#
#
front.kppv <- function(kppv.val, K, Xapp, zapp)#
{#
	minX <- min(Xapp[,1])-1#
	maxX <- max(Xapp[,1])+1#
	minY <- min(Xapp[,2])-1#
	maxY <- max(Xapp[,2])+1#
	# grille d'affichage #
	grilleX <- seq(from=minX,to=maxX,by=0.01)#
	naffX <- length(grilleX)#
	grilleY <- seq(from=minY,to=maxY,by=0.01)#
	naffY <- length(grilleY)#
#
	grille <- cbind(rep.int(grilleX,times=rep(naffY,naffX)),rep(grilleY,naffX))#
#
	# calcul des valeurs de la fonction #
	valf <- kppv.val(Xapp, zapp, K, grille)#
	plot(Xapp, col=c("red","green","blue","magenta","orange")[zapp])#
	contour(grilleX, grilleY, matrix(valf,nrow=naffX,byrow=T), add=T, drawlabels=FALSE, levels=1.5)#
}#
#
nbFamille <- length(unique(zapp))#
nppv <- c(3,5,7,9,11,13,15,17)#
#
K<- kppv.app(Xapp,zapp,Xtst,ztst,nppv)#
#ceuc.val(ceuc.app(Xapp,zapp),Xtst)#
#front.ceuc(ceuc.val,ceuc.app(Xapp,zapp),Xapp,zapp)#
#front.kppv(kppv.val, K, Xapp, zapp)
Xapp
Xapp <- X[c(1:15,21:35),]#
zapp <- z[c(1:15,21:35)]#
Xtst <- X[c(16:20,36:40),]#
ztst <- z[c(16:20,36:40)]
distanceEuclidienne <- function(x1,xt,y1,yt){#
	return(sqrt((x1-xt)^2 + (y1-yt)^2))#
}#
ceuc.app <- function(Xapp,zapp){#
napp <- dim(Xapp)[1]#
nbDimension <- dim(Xapp)[2]#
x<- NULL#
n <- NULL#
x <- rbind(rep(0, nbFamille),rep(0,nbDimension))#
for(z in 1:nbFamille){#
	for(i in 1:napp){#
		if(zapp[i]==z){#
			n[z] <- length(zapp[zapp==z])#
			for(j in 1:nbDimension){#
				x[z,j] <- x[z,j] + Xapp[i,j]#
			}#
		}#
		}#
		for(j in 1:nbDimension){#
				x[z,j] <- x[z,j] * (1/n[z])#
		}	#
	}#
	return(x)#
}#
mu<-rbind(ceuc.app(Xapp,zapp))#
#
ceuc.val <- function(mu,Xtst){#
napp <- dim(Xtst)[1]#
min <- rbind(rep(99999, napp))#
nbDimension <- dim(Xtst)[2]#
etiquette <- rbind(rep(0,napp))#
distance <- rbind(rep(0, nbFamille),rep(0,napp))#
for(i in 1:napp){#
	for(z in 1:nbFamille){#
		distance[z,i] <- distanceEuclidienne(Xtst[i,1],mu[z,1],Xtst[i,2],mu[z,2])#
		if(distance[z,i]< min[i]){#
			min[i] <- distance[z,i]#
			etiquette[i]<-z#
		}#
	}#
}#
	return(etiquette)#
}#
getVoisins <- function(Xapp,zapp,K,Xtst){#
	napp <- dim(Xapp)[1]#
	ntst <- dim(Xtst)[1]#
	distance <- matrix(0, ntst, napp)#
	voisins <- matrix(0,ntst,K)#
	for(i in 1:ntst){#
		min <- matrix(99999,K,2)#
		for(j in 1:napp){#
		distance[i,j] <- distanceEuclidienne(Xtst[i,1],Xapp[j,1],Xtst[i,2],Xapp[j,2])#
		if(j <= K ){#
			min[j,1] <- distance[i,j]#
			min[j,2] <- j#
			if(K!=1){#
				min <- min[order(min[,1]),]#
			}#
		}#
		else if(distance[i,j]< min[K,1]){#
			min[K,1] <- distance[i,j]#
			min[K,2] <- j#
			if(K!=1){#
				min <- min[order(min[,1]),]#
			}#
		}#
		}#
		voisins[i,] <- min[,2]#
	}#
	return(voisins)#
}#
#
kppv.app <- function(Xapp,zapp,Xval,zval,nppv){#
erreur <- 1#
for(i in nppv){#
    famille_K <- kppv.val(Xapp, zapp, i, Xval)#
    erreur_K <- sum((famille_K == zval)==TRUE)/length(zval)#
    print(erreur_K)#
    if(erreur > erreur_K){#
      erreur <- erreur_K#
      K <- i#
    }#
  }#
  return(K)#
}#
#
kppv.val <- function(Xapp,zapp,K,Xtst){#
	ntst <- dim(Xtst)[1]#
	etiquette <- rbind(rep(0,ntst))#
	voisins <- getVoisins(Xapp,zapp,K,Xtst)#
	for(i in 1:ntst){#
		count1 <- 0#
		count2 <- 0#
		for(k in 1:K){#
			if(zapp[voisins[i,k]]==1){#
				count1 <- count1 + 1#
#
			}#
			else{#
				count2 <- count2 + 1#
			}#
		}#
		if(count1 > count2){#
			etiquette[i]<-1#
		}#
		else{#
			etiquette[i]<-2#
		}#
	}#
	return(etiquette)#
}#
#
#Test de nos fonctions#
#
donn <- read.table("data/Synth1-40.txt",header=F)#
X <- donn[,1:2]#
z<- donn[,3]#
#
Xapp <- X[c(1:15,21:35),]#
zapp <- z[c(1:15,21:35)]#
Xtst <- X[c(16:20,36:40),]#
ztst <- z[c(16:20,36:40)]#
#
front.ceuc <- function(ceuc.val, mu, Xapp, zapp)#
{#
	minX <- min(Xapp[,1])-1#
	maxX <- max(Xapp[,1])+1#
	minY <- min(Xapp[,2])-1#
	maxY <- max(Xapp[,2])+1#
	# grille d'affichage #
	grilleX <- seq(from=minX,to=maxX,by=0.01)#
	naffX <- length(grilleX)#
	grilleY <- seq(from=minY,to=maxY,by=0.01)#
	naffY <- length(grilleY)#
#
	grille <- cbind(rep.int(grilleX,times=rep(naffY,naffX)),rep(grilleY,naffX))#
#
	# calcul des valeurs de la fonction #
	valf <- ceuc.val(mu, grille)#
	plot(Xapp, col=c("red","green","blue","magenta","orange")[zapp])#
	contour(grilleX, grilleY, matrix(valf,nrow=naffX,byrow=T), add=T, drawlabels=FALSE, levels=1.5)#
}#
#
front.kppv <- function(kppv.val, K, Xapp, zapp)#
{#
	minX <- min(Xapp[,1])-1#
	maxX <- max(Xapp[,1])+1#
	minY <- min(Xapp[,2])-1#
	maxY <- max(Xapp[,2])+1#
	# grille d'affichage #
	grilleX <- seq(from=minX,to=maxX,by=0.01)#
	naffX <- length(grilleX)#
	grilleY <- seq(from=minY,to=maxY,by=0.01)#
	naffY <- length(grilleY)#
#
	grille <- cbind(rep.int(grilleX,times=rep(naffY,naffX)),rep(grilleY,naffX))#
#
	# calcul des valeurs de la fonction #
	valf <- kppv.val(Xapp, zapp, K, grille)#
	plot(Xapp, col=c("red","green","blue","magenta","orange")[zapp])#
	contour(grilleX, grilleY, matrix(valf,nrow=naffX,byrow=T), add=T, drawlabels=FALSE, levels=1.5)#
}#
#
nbFamille <- length(unique(zapp))#
nppv <- c(3,5,7,9,11,13,15,17)#
#
K<- kppv.app(Xapp,zapp,Xtst,ztst,nppv)#
#ceuc.val(ceuc.app(Xapp,zapp),Xtst)#
#front.ceuc(ceuc.val,ceuc.app(Xapp,zapp),Xapp,zapp)#
#front.kppv(kppv.val, K, Xapp, zapp)
donn <- read.table("data/Synth1-40.txt",header=F)#
X <- donn[,1:2]#
z<- donn[,3]#
#
Xapp <- X[c(1:15,21:35),]#
zapp <- z[c(1:15,21:35)]#
Xtst <- X[c(16:20,36:40),]#
ztst <- z[c(16:20,36:40)]#
#
distanceEuclidienne <- function(x1,xt,y1,yt){#
	return(sqrt((x1-xt)^2 + (y1-yt)^2))#
}#
ceuc.app <- function(Xapp,zapp){#
napp <- dim(Xapp)[1]#
nbDimension <- dim(Xapp)[2]#
x<- NULL#
n <- NULL#
x <- rbind(rep(0, nbFamille),rep(0,nbDimension))#
for(z in 1:nbFamille){#
	for(i in 1:napp){#
		if(zapp[i]==z){#
			n[z] <- length(zapp[zapp==z])#
			for(j in 1:nbDimension){#
				x[z,j] <- x[z,j] + Xapp[i,j]#
			}#
		}#
		}#
		for(j in 1:nbDimension){#
				x[z,j] <- x[z,j] * (1/n[z])#
		}	#
	}#
	return(x)#
}#
mu<-rbind(ceuc.app(Xapp,zapp))#
#
ceuc.val <- function(mu,Xtst){#
napp <- dim(Xtst)[1]#
min <- rbind(rep(99999, napp))#
nbDimension <- dim(Xtst)[2]#
etiquette <- rbind(rep(0,napp))#
distance <- rbind(rep(0, nbFamille),rep(0,napp))#
for(i in 1:napp){#
	for(z in 1:nbFamille){#
		distance[z,i] <- distanceEuclidienne(Xtst[i,1],mu[z,1],Xtst[i,2],mu[z,2])#
		if(distance[z,i]< min[i]){#
			min[i] <- distance[z,i]#
			etiquette[i]<-z#
		}#
	}#
}#
	return(etiquette)#
}#
getVoisins <- function(Xapp,zapp,K,Xtst){#
	napp <- dim(Xapp)[1]#
	ntst <- dim(Xtst)[1]#
	distance <- matrix(0, ntst, napp)#
	voisins <- matrix(0,ntst,K)#
	for(i in 1:ntst){#
		min <- matrix(99999,K,2)#
		for(j in 1:napp){#
		distance[i,j] <- distanceEuclidienne(Xtst[i,1],Xapp[j,1],Xtst[i,2],Xapp[j,2])#
		if(j <= K ){#
			min[j,1] <- distance[i,j]#
			min[j,2] <- j#
			if(K!=1){#
				min <- min[order(min[,1]),]#
			}#
		}#
		else if(distance[i,j]< min[K,1]){#
			min[K,1] <- distance[i,j]#
			min[K,2] <- j#
			if(K!=1){#
				min <- min[order(min[,1]),]#
			}#
		}#
		}#
		voisins[i,] <- min[,2]#
	}#
	return(voisins)#
}#
#
kppv.app <- function(Xapp,zapp,Xval,zval,nppv){#
erreur <- 1#
for(i in nppv){#
    famille_K <- kppv.val(Xapp, zapp, i, Xval)#
    erreur_K <- sum((famille_K == zval)==TRUE)/length(zval)#
    print(erreur_K)#
    if(erreur > erreur_K){#
      erreur <- erreur_K#
      K <- i#
    }#
  }#
  return(K)#
}#
#
kppv.val <- function(Xapp,zapp,K,Xtst){#
	ntst <- dim(Xtst)[1]#
	etiquette <- rbind(rep(0,ntst))#
	voisins <- getVoisins(Xapp,zapp,K,Xtst)#
	for(i in 1:ntst){#
		count1 <- 0#
		count2 <- 0#
		for(k in 1:K){#
			if(zapp[voisins[i,k]]==1){#
				count1 <- count1 + 1#
#
			}#
			else{#
				count2 <- count2 + 1#
			}#
		}#
		if(count1 > count2){#
			etiquette[i]<-1#
		}#
		else{#
			etiquette[i]<-2#
		}#
	}#
	return(etiquette)#
}#
#
#Test de nos fonctions#
#
donn <- read.table("data/Synth1-40.txt",header=F)#
X <- donn[,1:2]#
z<- donn[,3]#
#
Xapp <- X[c(1:15,21:35),]#
zapp <- z[c(1:15,21:35)]#
Xtst <- X[c(16:20,36:40),]#
ztst <- z[c(16:20,36:40)]#
#
front.ceuc <- function(ceuc.val, mu, Xapp, zapp)#
{#
	minX <- min(Xapp[,1])-1#
	maxX <- max(Xapp[,1])+1#
	minY <- min(Xapp[,2])-1#
	maxY <- max(Xapp[,2])+1#
	# grille d'affichage #
	grilleX <- seq(from=minX,to=maxX,by=0.01)#
	naffX <- length(grilleX)#
	grilleY <- seq(from=minY,to=maxY,by=0.01)#
	naffY <- length(grilleY)#
#
	grille <- cbind(rep.int(grilleX,times=rep(naffY,naffX)),rep(grilleY,naffX))#
#
	# calcul des valeurs de la fonction #
	valf <- ceuc.val(mu, grille)#
	plot(Xapp, col=c("red","green","blue","magenta","orange")[zapp])#
	contour(grilleX, grilleY, matrix(valf,nrow=naffX,byrow=T), add=T, drawlabels=FALSE, levels=1.5)#
}#
#
front.kppv <- function(kppv.val, K, Xapp, zapp)#
{#
	minX <- min(Xapp[,1])-1#
	maxX <- max(Xapp[,1])+1#
	minY <- min(Xapp[,2])-1#
	maxY <- max(Xapp[,2])+1#
	# grille d'affichage #
	grilleX <- seq(from=minX,to=maxX,by=0.01)#
	naffX <- length(grilleX)#
	grilleY <- seq(from=minY,to=maxY,by=0.01)#
	naffY <- length(grilleY)#
#
	grille <- cbind(rep.int(grilleX,times=rep(naffY,naffX)),rep(grilleY,naffX))#
#
	# calcul des valeurs de la fonction #
	valf <- kppv.val(Xapp, zapp, K, grille)#
	plot(Xapp, col=c("red","green","blue","magenta","orange")[zapp])#
	contour(grilleX, grilleY, matrix(valf,nrow=naffX,byrow=T), add=T, drawlabels=FALSE, levels=1.5)#
}#
#
nbFamille <- length(unique(zapp))#
nppv <- c(3,5,7,9,11,13,15,17)#
#
K<- kppv.app(Xapp,zapp,Xtst,ztst,nppv)#
#ceuc.val(ceuc.app(Xapp,zapp),Xtst)#
#front.ceuc(ceuc.val,ceuc.app(Xapp,zapp),Xapp,zapp)#
#front.kppv(kppv.val, K, Xapp, zapp)
donn <- read.table("data/Synth1-40.txt",header=F)#
X <- donn[,1:2]#
z<- donn[,3]#
#
Xapp <- X[c(1:15,21:35),]#
zapp <- z[c(1:15,21:35)]#
Xtst <- X[c(16:20,36:40),]#
ztst <- z[c(16:20,36:40)]#
#
distanceEuclidienne <- function(x1,xt,y1,yt){#
	return(sqrt((x1-xt)^2 + (y1-yt)^2))#
}#
ceuc.app <- function(Xapp,zapp){#
napp <- dim(Xapp)[1]#
nbDimension <- dim(Xapp)[2]#
x<- NULL#
n <- NULL#
x <- rbind(rep(0, nbFamille),rep(0,nbDimension))#
for(z in 1:nbFamille){#
	for(i in 1:napp){#
		if(zapp[i]==z){#
			n[z] <- length(zapp[zapp==z])#
			for(j in 1:nbDimension){#
				x[z,j] <- x[z,j] + Xapp[i,j]#
			}#
		}#
		}#
		for(j in 1:nbDimension){#
				x[z,j] <- x[z,j] * (1/n[z])#
		}	#
	}#
	return(x)#
}#
mu<-rbind(ceuc.app(Xapp,zapp))#
#
ceuc.val <- function(mu,Xtst){#
napp <- dim(Xtst)[1]#
min <- rbind(rep(99999, napp))#
nbDimension <- dim(Xtst)[2]#
etiquette <- rbind(rep(0,napp))#
distance <- rbind(rep(0, nbFamille),rep(0,napp))#
for(i in 1:napp){#
	for(z in 1:nbFamille){#
		distance[z,i] <- distanceEuclidienne(Xtst[i,1],mu[z,1],Xtst[i,2],mu[z,2])#
		if(distance[z,i]< min[i]){#
			min[i] <- distance[z,i]#
			etiquette[i]<-z#
		}#
	}#
}#
	return(etiquette)#
}#
getVoisins <- function(Xapp,zapp,K,Xtst){#
	napp <- dim(Xapp)[1]#
	ntst <- dim(Xtst)[1]#
	distance <- matrix(0, ntst, napp)#
	voisins <- matrix(0,ntst,K)#
	for(i in 1:ntst){#
		min <- matrix(99999,K,2)#
		for(j in 1:napp){#
		distance[i,j] <- distanceEuclidienne(Xtst[i,1],Xapp[j,1],Xtst[i,2],Xapp[j,2])#
		if(j <= K ){#
			min[j,1] <- distance[i,j]#
			min[j,2] <- j#
			if(K!=1){#
				min <- min[order(min[,1]),]#
			}#
		}#
		else if(distance[i,j]< min[K,1]){#
			min[K,1] <- distance[i,j]#
			min[K,2] <- j#
			if(K!=1){#
				min <- min[order(min[,1]),]#
			}#
		}#
		}#
		voisins[i,] <- min[,2]#
	}#
	return(voisins)#
}#
#
kppv.app <- function(Xapp,zapp,Xval,zval,nppv){#
erreur <- 1#
for(i in nppv){#
    famille_K <- kppv.val(Xapp, zapp, i, Xval)#
    erreur_K <- sum((famille_K == zval)==TRUE)/length(zval)#
    print(erreur_K)#
    if(erreur > erreur_K){#
      erreur <- erreur_K#
      K <- i#
    }#
  }#
  return(K)#
}#
#
kppv.val <- function(Xapp,zapp,K,Xtst){#
	ntst <- dim(Xtst)[1]#
	etiquette <- rbind(rep(0,ntst))#
	voisins <- getVoisins(Xapp,zapp,K,Xtst)#
	for(i in 1:ntst){#
		count1 <- 0#
		count2 <- 0#
		for(k in 1:K){#
			if(zapp[voisins[i,k]]==1){#
				count1 <- count1 + 1#
#
			}#
			else{#
				count2 <- count2 + 1#
			}#
		}#
		if(count1 > count2){#
			etiquette[i]<-1#
		}#
		else{#
			etiquette[i]<-2#
		}#
	}#
	return(etiquette)#
}#
#
#Test de nos fonctions#
#
donn <- read.table("data/Synth1-40.txt",header=F)#
X <- donn[,1:2]#
z<- donn[,3]#
#
Xapp <- X[c(1:15,21:35),]#
zapp <- z[c(1:15,21:35)]#
Xtst <- X[c(16:20,36:40),]#
ztst <- z[c(16:20,36:40)]#
#
front.ceuc <- function(ceuc.val, mu, Xapp, zapp)#
{#
	minX <- min(Xapp[,1])-1#
	maxX <- max(Xapp[,1])+1#
	minY <- min(Xapp[,2])-1#
	maxY <- max(Xapp[,2])+1#
	# grille d'affichage #
	grilleX <- seq(from=minX,to=maxX,by=0.01)#
	naffX <- length(grilleX)#
	grilleY <- seq(from=minY,to=maxY,by=0.01)#
	naffY <- length(grilleY)#
#
	grille <- cbind(rep.int(grilleX,times=rep(naffY,naffX)),rep(grilleY,naffX))#
#
	# calcul des valeurs de la fonction #
	valf <- ceuc.val(mu, grille)#
	plot(Xapp, col=c("red","green","blue","magenta","orange")[zapp])#
	contour(grilleX, grilleY, matrix(valf,nrow=naffX,byrow=T), add=T, drawlabels=FALSE, levels=1.5)#
}#
#
front.kppv <- function(kppv.val, K, Xapp, zapp)#
{#
	minX <- min(Xapp[,1])-1#
	maxX <- max(Xapp[,1])+1#
	minY <- min(Xapp[,2])-1#
	maxY <- max(Xapp[,2])+1#
	# grille d'affichage #
	grilleX <- seq(from=minX,to=maxX,by=0.01)#
	naffX <- length(grilleX)#
	grilleY <- seq(from=minY,to=maxY,by=0.01)#
	naffY <- length(grilleY)#
#
	grille <- cbind(rep.int(grilleX,times=rep(naffY,naffX)),rep(grilleY,naffX))#
#
	# calcul des valeurs de la fonction #
	valf <- kppv.val(Xapp, zapp, K, grille)#
	plot(Xapp, col=c("red","green","blue","magenta","orange")[zapp])#
	contour(grilleX, grilleY, matrix(valf,nrow=naffX,byrow=T), add=T, drawlabels=FALSE, levels=1.5)#
}#
#
nbFamille <- length(unique(zapp))#
nppv <- c(3,5,7,9,11,13,15,17)#
#
K<- kppv.app(Xapp,zapp,Xtst,ztst,nppv)#
#ceuc.val(ceuc.app(Xapp,zapp),Xtst)#
#front.ceuc(ceuc.val,ceuc.app(Xapp,zapp),Xapp,zapp)#
#front.kppv(kppv.val, K, Xapp, zapp)
getwd
getwd()
donn <- read.table("Synth1-40.txt",header=F)#
X <- donn[,1:2]#
z<- donn[,3]#
#
Xapp <- X[c(1:15,21:35),]#
zapp <- z[c(1:15,21:35)]#
Xtst <- X[c(16:20,36:40),]#
ztst <- z[c(16:20,36:40)]
distanceEuclidienne <- function(x1,xt,y1,yt){#
	return(sqrt((x1-xt)^2 + (y1-yt)^2))#
}#
ceuc.app <- function(Xapp,zapp){#
napp <- dim(Xapp)[1]#
nbDimension <- dim(Xapp)[2]#
x<- NULL#
n <- NULL#
x <- rbind(rep(0, nbFamille),rep(0,nbDimension))#
for(z in 1:nbFamille){#
	for(i in 1:napp){#
		if(zapp[i]==z){#
			n[z] <- length(zapp[zapp==z])#
			for(j in 1:nbDimension){#
				x[z,j] <- x[z,j] + Xapp[i,j]#
			}#
		}#
		}#
		for(j in 1:nbDimension){#
				x[z,j] <- x[z,j] * (1/n[z])#
		}	#
	}#
	return(x)#
}#
mu<-rbind(ceuc.app(Xapp,zapp))#
#
ceuc.val <- function(mu,Xtst){#
napp <- dim(Xtst)[1]#
min <- rbind(rep(99999, napp))#
nbDimension <- dim(Xtst)[2]#
etiquette <- rbind(rep(0,napp))#
distance <- rbind(rep(0, nbFamille),rep(0,napp))#
for(i in 1:napp){#
	for(z in 1:nbFamille){#
		distance[z,i] <- distanceEuclidienne(Xtst[i,1],mu[z,1],Xtst[i,2],mu[z,2])#
		if(distance[z,i]< min[i]){#
			min[i] <- distance[z,i]#
			etiquette[i]<-z#
		}#
	}#
}#
	return(etiquette)#
}#
getVoisins <- function(Xapp,zapp,K,Xtst){#
	napp <- dim(Xapp)[1]#
	ntst <- dim(Xtst)[1]#
	distance <- matrix(0, ntst, napp)#
	voisins <- matrix(0,ntst,K)#
	for(i in 1:ntst){#
		min <- matrix(99999,K,2)#
		for(j in 1:napp){#
		distance[i,j] <- distanceEuclidienne(Xtst[i,1],Xapp[j,1],Xtst[i,2],Xapp[j,2])#
		if(j <= K ){#
			min[j,1] <- distance[i,j]#
			min[j,2] <- j#
			if(K!=1){#
				min <- min[order(min[,1]),]#
			}#
		}#
		else if(distance[i,j]< min[K,1]){#
			min[K,1] <- distance[i,j]#
			min[K,2] <- j#
			if(K!=1){#
				min <- min[order(min[,1]),]#
			}#
		}#
		}#
		voisins[i,] <- min[,2]#
	}#
	return(voisins)#
}#
#
kppv.app <- function(Xapp,zapp,Xval,zval,nppv){#
erreur <- 1#
for(i in nppv){#
    famille_K <- kppv.val(Xapp, zapp, i, Xval)#
    erreur_K <- sum((famille_K == zval)==TRUE)/length(zval)#
    print(erreur_K)#
    if(erreur > erreur_K){#
      erreur <- erreur_K#
      K <- i#
    }#
  }#
  return(K)#
}#
#
kppv.val <- function(Xapp,zapp,K,Xtst){#
	ntst <- dim(Xtst)[1]#
	etiquette <- rbind(rep(0,ntst))#
	voisins <- getVoisins(Xapp,zapp,K,Xtst)#
	for(i in 1:ntst){#
		count1 <- 0#
		count2 <- 0#
		for(k in 1:K){#
			if(zapp[voisins[i,k]]==1){#
				count1 <- count1 + 1#
#
			}#
			else{#
				count2 <- count2 + 1#
			}#
		}#
		if(count1 > count2){#
			etiquette[i]<-1#
		}#
		else{#
			etiquette[i]<-2#
		}#
	}#
	return(etiquette)#
}#
#
#Test de nos fonctions#
#
donn <- read.table("data/Synth1-40.txt",header=F)#
X <- donn[,1:2]#
z<- donn[,3]#
#
Xapp <- X[c(1:15,21:35),]#
zapp <- z[c(1:15,21:35)]#
Xtst <- X[c(16:20,36:40),]#
ztst <- z[c(16:20,36:40)]#
#
front.ceuc <- function(ceuc.val, mu, Xapp, zapp)#
{#
	minX <- min(Xapp[,1])-1#
	maxX <- max(Xapp[,1])+1#
	minY <- min(Xapp[,2])-1#
	maxY <- max(Xapp[,2])+1#
	# grille d'affichage #
	grilleX <- seq(from=minX,to=maxX,by=0.01)#
	naffX <- length(grilleX)#
	grilleY <- seq(from=minY,to=maxY,by=0.01)#
	naffY <- length(grilleY)#
#
	grille <- cbind(rep.int(grilleX,times=rep(naffY,naffX)),rep(grilleY,naffX))#
#
	# calcul des valeurs de la fonction #
	valf <- ceuc.val(mu, grille)#
	plot(Xapp, col=c("red","green","blue","magenta","orange")[zapp])#
	contour(grilleX, grilleY, matrix(valf,nrow=naffX,byrow=T), add=T, drawlabels=FALSE, levels=1.5)#
}#
#
front.kppv <- function(kppv.val, K, Xapp, zapp)#
{#
	minX <- min(Xapp[,1])-1#
	maxX <- max(Xapp[,1])+1#
	minY <- min(Xapp[,2])-1#
	maxY <- max(Xapp[,2])+1#
	# grille d'affichage #
	grilleX <- seq(from=minX,to=maxX,by=0.01)#
	naffX <- length(grilleX)#
	grilleY <- seq(from=minY,to=maxY,by=0.01)#
	naffY <- length(grilleY)#
#
	grille <- cbind(rep.int(grilleX,times=rep(naffY,naffX)),rep(grilleY,naffX))#
#
	# calcul des valeurs de la fonction #
	valf <- kppv.val(Xapp, zapp, K, grille)#
	plot(Xapp, col=c("red","green","blue","magenta","orange")[zapp])#
	contour(grilleX, grilleY, matrix(valf,nrow=naffX,byrow=T), add=T, drawlabels=FALSE, levels=1.5)#
}#
#
nbFamille <- length(unique(zapp))#
nppv <- c(3,5,7,9,11,13,15,17)#
#
K<- kppv.app(Xapp,zapp,Xtst,ztst,nppv)#
#ceuc.val(ceuc.app(Xapp,zapp),Xtst)#
#front.ceuc(ceuc.val,ceuc.app(Xapp,zapp),Xapp,zapp)#
#front.kppv(kppv.val, K, Xapp, zapp)
napp
napp <- dim(Xapp)[1]
napp
zapp
length(zapp)
calcul_pi(Jeu_donnees){#
pi <- NULL#
n <- NULL#
napp <- dim(Xapp)[1]#
	for(z in 1:nbFamille){#
		for(i in 1:napp){#
			if(zapp[i]==z){#
			n[z] <- length(zapp[zapp==z])#
		}#
		pi[z]=n[z]/length(zapp)#
	}#
}
calcul_pi(Jeu_donnees){#
pi <- NULL#
n <- NULL#
napp <- dim(Xapp)[1]#
	for(z in 1:nbFamille){#
		for(i in 1:napp){#
			if(zapp[i]==z){#
			n[z] <- length(zapp[zapp==z])#
			}#
		pi[z]=n[z]/length(zapp)#
		}#
	}#
}
calcul_pi(Jeu_donnees){#
pi <- NULL#
n <- NULL#
napp <- dim(Xapp)[1]#
for(z in 1:nbFamille){#
	for(i in 1:napp){#
		if(zapp[i]==z){#
			n[z] <- length(zapp[zapp==z])#
			}#
		pi[z]=n[z]/length(zapp)#
		}#
	}#
}
calcul_pi(Jeu_donnees){#
pi <- NULL#
n <- NULL#
napp <- dim(Xapp)[1]#
for(z in 1:nbFamille){#
	for(i in 1:napp){#
		if(zapp[i]==z){#
			n[z] <- length(zapp[zapp==z])#
			}#
		pi[z]=n[z]/length(zapp)#
		}#
	}
calcul_pi(Synth1-40.txt)
set_donnees <- function(){#
	Z = 1#
}
Z
set_donnees <- function(){#
	Z <<- 1#
}
Z
X <- donn[,(1:dim(donn[1,])-1)]
X <- donn[,(1:dim(donn[2])-1)]
X <- donn[,(1:dim(donn[2])[2]-1)]
X
X
donn
X <- donn[,(1:dim(donn[1,])[2]-1)]
X
Z <- donn[,dim(donn[1,])[2]]
Z
calcul_pi <- function(Jeu_donnees){#
	X <- donn[,(1:dim(donn[1,])[2]-1)]#
	Z <- donn[,dim(donn[1,])[2]]#
	pi <- NULL#
	n <- NULL#
	n <- dim(X)[1]#
	for(z in 1:nbFamille){#
		for(i in 1:n){#
			if(Z[i]==z){#
				n[z] <- length(Z[Z==z])#
				}#
			pi[z]=n[z]/length(Z)#
		}#
	}#
}
donn
calcul_pi <- function(donn){#
	X <- donn[,(1:dim(donn[1,])[2]-1)]#
	Z <- donn[,dim(donn[1,])[2]]#
	pi <- NULL#
	n <- NULL#
	n <- dim(X)[1]#
	for(z in 1:nbFamille){#
		for(i in 1:n){#
			if(Z[i]==z){#
				n[z] <- length(Z[Z==z])#
				}#
			pi[z]=n[z]/length(Z)#
		}#
	}#
}
donn
calcul_pi(donn)
pi
